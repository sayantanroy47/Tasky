import 'dart:math' as math;
import 'package:flutter/material.dart';
import '../../../core/theme/app_theme_data.dart';
import '../../../core/theme/typography_constants.dart';


/// Epic theme preview card with distinctive visuals for each theme
class EpicThemePreviewCard extends StatefulWidget {
  final AppThemeData theme;
  final bool isSelected;
  final VoidCallback? onTap;

  const EpicThemePreviewCard({
    super.key,
    required this.theme,
    this.isSelected = false,
    this.onTap,
  });

  @override
  State<EpicThemePreviewCard> createState() => _EpicThemePreviewCardState();
}

class _EpicThemePreviewCardState extends State<EpicThemePreviewCard>
    with TickerProviderStateMixin {
  late AnimationController _hoverController;
  late AnimationController _effectController;
  late Animation<double> _hoverAnimation;
  late Animation<double> _effectAnimation;
  bool _isHovered = false;


  @override
  void initState() {
    super.initState();
    _hoverController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _effectController = AnimationController(
      duration: const Duration(seconds: 3),
      vsync: this,
    )..repeat();

    _hoverAnimation = Tween<double>(
      begin: 1.0,
      end: 1.08,
    ).animate(CurvedAnimation(
      parent: _hoverController,
      curve: Curves.easeOutCubic,
    ));

    _effectAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _effectController,
      curve: Curves.linear,
    ));
  }

  @override
  void dispose() {
    _hoverController.dispose();
    _effectController.dispose();
    super.dispose();
  }

  void _setHovered(bool hovered) {
    if (_isHovered != hovered) {
      setState(() => _isHovered = hovered);
      if (hovered) {
        _hoverController.forward();
      } else {
        _hoverController.reverse();
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return MouseRegion(
      onEnter: (_) => _setHovered(true),
      onExit: (_) => _setHovered(false),
      child: GestureDetector(
        onTap: widget.onTap,
        child: AnimatedBuilder(
          animation: Listenable.merge([_hoverAnimation, _effectAnimation]),
          builder: (context, child) {
            return Transform.scale(
              scale: _hoverAnimation.value,
              child: _buildEpicCard(),
            );
          },
        ),
      ),
    );
  }

  Widget _buildEpicCard() {
    final colors = widget.theme.colors;
    final metadata = widget.theme.metadata;
    final themeId = metadata.id;
    final isDark = themeId.contains('dark') || themeId.contains('_dark');

    return Container(
      height: 280, // Taller for more epic presentation
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(TypographyConstants.radiusStandard * 2),
        border: Border.all(
          color: widget.isSelected 
              ? colors.primary.withValues(alpha: 0.8)
              : colors.outline.withValues(alpha: 0.3),
          width: widget.isSelected ? 3.0 : 1.5,
        ),
        boxShadow: [
          BoxShadow(
            color: colors.shadow.withValues(alpha: widget.isSelected ? 0.3 : 0.15),
            blurRadius: widget.isSelected ? 20 : 10,
            spreadRadius: widget.isSelected ? 2 : 0,
            offset: Offset(0, widget.isSelected ? 8 : 4),
          ),
          if (widget.isSelected)
            BoxShadow(
              color: colors.primary.withValues(alpha: 0.2),
              blurRadius: 30,
              spreadRadius: 5,
              offset: const Offset(0, 10),
            ),
        ],
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(TypographyConstants.radiusStandard * 2),
        child: Stack(
          children: [
            // Epic Theme-Specific Background
            _buildEpicBackground(themeId, colors, isDark),
            
            // Gradient Overlay for better text readability
            Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [
                    Colors.transparent,
                    colors.surface.withValues(alpha: isDark ? 0.7 : 0.85),
                  ],
                  stops: const [0.3, 1.0],
                ),
              ),
            ),
            
            // Epic Content Layout
            Padding(
              padding: const EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Header with theme icon and selection indicator
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      // Epic theme icon
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: [colors.primary, colors.secondary],
                          ),
                          borderRadius: BorderRadius.circular(TypographyConstants.radiusStandard),
                          boxShadow: [
                            BoxShadow(
                              color: colors.primary.withValues(alpha: 0.4),
                              blurRadius: 8,
                              offset: const Offset(0, 4),
                            ),
                          ],
                        ),
                        child: Icon(
                          metadata.previewIcon,
                          color: Colors.white,
                          size: 28,
                        ),
                      ),
                      
                      // Selection indicator
                      if (widget.isSelected)
                        Container(
                          padding: const EdgeInsets.all(8),
                          decoration: BoxDecoration(
                            color: colors.primary,
                            shape: BoxShape.circle,
                            boxShadow: [
                              BoxShadow(
                                color: colors.primary.withValues(alpha: 0.5),
                                blurRadius: 10,
                                spreadRadius: 2,
                              ),
                            ],
                          ),
                          child: Icon(
                            Icons.check,
                            color: colors.onPrimary,
                            size: 20,
                          ),
                        ),
                    ],
                  ),
                  
                  const Spacer(),
                  
                  // Epic Color Palette Display
                  Container(
                    padding: const EdgeInsets.all(16),
                    margin: const EdgeInsets.only(bottom: 12),
                    decoration: BoxDecoration(
                      color: colors.surface.withValues(alpha: isDark ? 0.9 : 0.95),
                      borderRadius: BorderRadius.circular(TypographyConstants.radiusStandard),
                      border: Border.all(
                        color: colors.outline.withValues(alpha: 0.2),
                      ),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Theme name with epic typography
                        Text(
                          metadata.name,
                          style: TextStyle(
                            color: colors.onSurface,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            letterSpacing: 0.5,
                          ),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                        
                        const SizedBox(height: 8),
                        
                        // Epic color swatches
                        Row(
                          children: [
                            _buildEpicColorSwatch(colors.primary, 'Primary'),
                            const SizedBox(width: 8),
                            _buildEpicColorSwatch(colors.secondary, 'Secondary'),
                            const SizedBox(width: 8),
                            _buildEpicColorSwatch(colors.accent, 'Accent'),
                            
                            const Spacer(),
                            
                            // Popularity score with epic styling
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
                              decoration: BoxDecoration(
                                gradient: LinearGradient(
                                  colors: [colors.primary.withValues(alpha: 0.8), colors.secondary.withValues(alpha: 0.6)],
                                ),
                                borderRadius: BorderRadius.circular(TypographyConstants.radiusStandard),
                                boxShadow: [
                                  BoxShadow(
                                    color: colors.primary.withValues(alpha: 0.3),
                                    blurRadius: 4,
                                    offset: const Offset(0, 2),
                                  ),
                                ],
                              ),
                              child: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  const Icon(
                                    Icons.star,
                                    color: Colors.white,
                                    size: 14,
                                  ),
                                  const SizedBox(width: 4),
                                  Text(
                                    metadata.popularityScore.toStringAsFixed(1),
                                    style: const TextStyle(
                                      color: Colors.white,
                                      fontSize: 12,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                        
                        const SizedBox(height: 8),
                        
                        // Theme description with better styling
                        Text(
                          metadata.description,
                          style: TextStyle(
                            color: colors.onSurface.withValues(alpha: 0.8),
                            fontSize: 11,
                            height: 1.2,
                          ),
                          maxLines: 2,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEpicBackground(String themeId, dynamic colors, bool isDark) {
    // Create theme-specific epic backgrounds
    if (themeId.contains('matrix')) {
      return _buildMatrixBackground(colors, isDark);
    } else if (themeId.contains('vegeta') || themeId.contains('dragon')) {
      return _buildEnergyBackground(colors, isDark);
    } else if (themeId.contains('dracula')) {
      return _buildDraculaBackground(colors, isDark);
    } else if (themeId.contains('expressive')) {
      return _buildExpressiveBackground(colors, isDark);
    } else {
      return _buildDefaultBackground(colors, isDark);
    }
  }

  Widget _buildMatrixBackground(dynamic colors, bool isDark) {
    return Stack(
      children: [
        // Matrix-style animated background
        Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                colors.surface,
                isDark ? Colors.black87 : colors.surface,
                colors.primary.withValues(alpha: 0.1),
              ],
            ),
          ),
        ),
        // Animated matrix rain effect
        ...List.generate(8, (i) => 
          Positioned(
            left: (i * 35.0) % 200,
            top: (_effectAnimation.value * 300 + i * 50) % 320 - 40,
            child: Text(
              '010110',
              style: TextStyle(
                color: colors.primary.withValues(alpha: 0.6),
                fontSize: 12,
                fontFamily: 'monospace',
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildEnergyBackground(dynamic colors, bool isDark) {
    return Stack(
      children: [
        Container(
          decoration: BoxDecoration(
            gradient: RadialGradient(
              center: Alignment.topRight,
              colors: [
                colors.primary.withValues(alpha: 0.3),
                colors.secondary.withValues(alpha: 0.2),
                colors.surface,
              ],
            ),
          ),
        ),
        // Lightning effect
        Positioned(
          top: 20 + math.sin(_effectAnimation.value * math.pi * 2) * 10,
          right: 30,
          child: Icon(
            Icons.flash_on,
            color: colors.accent.withValues(alpha: 0.7),
            size: 40,
          ),
        ),
      ],
    );
  }

  Widget _buildDraculaBackground(dynamic colors, bool isDark) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          colors: [
            colors.primary.withValues(alpha: 0.2),
            colors.surface,
            colors.secondary.withValues(alpha: 0.1),
          ],
        ),
      ),
      child: Stack(
        children: [
          Positioned(
            top: 40,
            right: 20,
            child: Transform.rotate(
              angle: _effectAnimation.value * math.pi * 2,
              child: Icon(
                Icons.nightlight_round,
                color: colors.accent.withValues(alpha: 0.5),
                size: 30,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildExpressiveBackground(dynamic colors, bool isDark) {
    return Container(
      decoration: BoxDecoration(
        gradient: SweepGradient(
          center: Alignment.center,
          startAngle: _effectAnimation.value * math.pi * 2,
          colors: [
            colors.primary.withValues(alpha: 0.3),
            colors.secondary.withValues(alpha: 0.2),
            colors.tertiary.withValues(alpha: 0.25),
            colors.primary.withValues(alpha: 0.3),
          ],
        ),
      ),
    );
  }

  Widget _buildDefaultBackground(dynamic colors, bool isDark) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            colors.primary.withValues(alpha: 0.15),
            colors.surface,
            colors.secondary.withValues(alpha: 0.1),
          ],
        ),
      ),
    );
  }

  Widget _buildEpicColorSwatch(Color color, String label) {
    return Tooltip(
      message: label,
      child: Container(
        width: 32,
        height: 24,
        decoration: BoxDecoration(
          color: color,
          borderRadius: BorderRadius.circular(TypographyConstants.radiusStandard / 2),
          border: Border.all(
            color: Colors.white.withValues(alpha: 0.3),
            width: 1,
          ),
          boxShadow: [
            BoxShadow(
              color: color.withValues(alpha: 0.4),
              blurRadius: 4,
              offset: const Offset(0, 2),
            ),
          ],
        ),
      ),
    );
  }
}