import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'glassmorphism_container.dart';
import '../../core/theme/typography_constants.dart';
import '../../domain/entities/task_model.dart';
import '../../domain/entities/subtask.dart' as entities;
import '../providers/subtask_providers.dart';

/// Enhanced widget for displaying and managing subtasks within a task
class EnhancedSubTaskList extends ConsumerStatefulWidget {
  final TaskModel task;
  final bool isEditable;
  final bool showHeader;

  const EnhancedSubTaskList({
    super.key,
    required this.task,
    this.isEditable = true,
    this.showHeader = true,
  });

  @override
  ConsumerState<EnhancedSubTaskList> createState() => _EnhancedSubTaskListState();
}

class _EnhancedSubTaskListState extends ConsumerState<EnhancedSubTaskList> {
  final TextEditingController _newSubTaskController = TextEditingController();
  bool _isAddingSubTask = false;
  bool _isLoading = false;

  @override
  void dispose() {
    _newSubTaskController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final subtasksAsync = ref.watch(subtasksForTaskProvider(widget.task.id));
    final completionPercentageAsync = ref.watch(subtaskCompletionPercentageProvider(widget.task.id));

    return GlassmorphismContainer(
      borderRadius: BorderRadius.circular(TypographyConstants.radiusStandard),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Header with progress
            if (widget.showHeader) ...[
              _buildHeader(theme, subtasksAsync, completionPercentageAsync),
              const SizedBox(height: 16),
            ],

            // Subtasks content
            subtasksAsync.when(
              data: (subtasks) => _buildSubtaskContent(theme, subtasks),
              loading: () => const Center(
                child: Padding(
                  padding: EdgeInsets.all(32),
                  child: CircularProgressIndicator(),
                ),
              ),
              error: (error, _) => _buildErrorState(theme, error.toString()),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildHeader(
    ThemeData theme,
    AsyncValue<List<entities.SubTask>> subtasksAsync,
    AsyncValue<double> completionPercentageAsync,
  ) {
    return Column(
      children: [
        // Title and stats
        Row(
          children: [
            Text(
              'Subtasks',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const Spacer(),
            
            // Task count
            subtasksAsync.when(
              data: (subtasks) {
                final completed = subtasks.where((s) => s.isCompleted).length;
                return Text(
                  '$completed/${subtasks.length}',
                  style: theme.textTheme.bodySmall?.copyWith(
                    color: theme.colorScheme.onSurfaceVariant,
                  ),
                );
              },
              loading: () => const SizedBox(),
              error: (_, __) => const SizedBox(),
            ),
            
            // Menu button
            if (widget.isEditable)
              PopupMenuButton<String>(
                icon: Icon(
                  Icons.more_vert,
                  color: theme.colorScheme.onSurfaceVariant,
                ),
                onSelected: _handleMenuAction,
                itemBuilder: (context) => [
                  const PopupMenuItem(
                    value: 'complete_all',
                    child: Row(
                      children: [
                        Icon(Icons.check_circle),
                        SizedBox(width: 8),
                        Text('Complete All'),
                      ],
                    ),
                  ),
                  const PopupMenuItem(
                    value: 'uncomplete_all',
                    child: Row(
                      children: [
                        Icon(Icons.radio_button_unchecked),
                        SizedBox(width: 8),
                        Text('Uncomplete All'),
                      ],
                    ),
                  ),
                  const PopupMenuItem(
                    value: 'delete_all',
                    child: Row(
                      children: [
                        Icon(Icons.delete, color: Colors.red),
                        SizedBox(width: 8),
                        Text('Delete All', style: TextStyle(color: Colors.red)),
                      ],
                    ),
                  ),
                ],
              ),
          ],
        ),

        const SizedBox(height: 8),

        // Progress bar
        completionPercentageAsync.when(
          data: (percentage) => LinearProgressIndicator(
            value: percentage / 100.0,
            backgroundColor: theme.colorScheme.surfaceContainerHighest,
            valueColor: AlwaysStoppedAnimation<Color>(
              percentage == 100.0 ? Colors.green : theme.colorScheme.primary,
            ),
          ),
          loading: () => LinearProgressIndicator(
            backgroundColor: theme.colorScheme.surfaceContainerHighest,
          ),
          error: (_, __) => const SizedBox(),
        ),
      ],
    );
  }

  Widget _buildSubtaskContent(ThemeData theme, List<entities.SubTask> subtasks) {
    if (subtasks.isEmpty && !_isAddingSubTask) {
      return _buildEmptyState(theme);
    }

    return Column(
      children: [
        // Subtasks list
        ...subtasks.asMap().entries.map((entry) {
          final index = entry.key;
          final subtask = entry.value;
          return _buildSubtaskItem(theme, subtask, index, subtasks.length);
        }),

        // Add new subtask section
        if (widget.isEditable) ...[
          const SizedBox(height: 8),
          if (_isAddingSubTask)
            _buildAddSubTaskForm(theme)
          else
            _buildAddSubTaskButton(theme),
        ],
      ],
    );
  }

  Widget _buildSubtaskItem(
    ThemeData theme,
    entities.SubTask subtask,
    int index,
    int totalCount,
  ) {
    return Card(
      margin: const EdgeInsets.only(bottom: 8),
      child: ListTile(
        dense: true,
        leading: Checkbox(
          value: subtask.isCompleted,
          onChanged: widget.isEditable
              ? (_) => _toggleSubtask(subtask.id)
              : null,
        ),
        title: Text(
          subtask.title,
          style: TextStyle(
            decoration: subtask.isCompleted
                ? TextDecoration.lineThrough
                : null,
            color: subtask.isCompleted
                ? theme.colorScheme.onSurfaceVariant
                : null,
          ),
        ),
        subtitle: subtask.completedAt != null
            ? Text(
                'Completed: ${_formatDateTime(subtask.completedAt!)}',
                style: theme.textTheme.bodySmall,
              )
            : null,
        trailing: widget.isEditable
            ? Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  // Move up
                  if (index > 0)
                    IconButton(
                      icon: const Icon(Icons.keyboard_arrow_up),
                      onPressed: () => _moveSubtaskUp(subtask.id),
                      tooltip: 'Move up',
                    ),
                  
                  // Move down
                  if (index < totalCount - 1)
                    IconButton(
                      icon: const Icon(Icons.keyboard_arrow_down),
                      onPressed: () => _moveSubtaskDown(subtask.id),
                      tooltip: 'Move down',
                    ),
                  
                  // Edit
                  IconButton(
                    icon: const Icon(Icons.edit),
                    onPressed: () => _editSubtask(subtask),
                    tooltip: 'Edit',
                  ),
                  
                  // Delete
                  IconButton(
                    icon: const Icon(Icons.delete, color: Colors.red),
                    onPressed: () => _deleteSubtask(subtask.id),
                    tooltip: 'Delete',
                  ),
                ],
              )
            : null,
      ),
    );
  }

  Widget _buildAddSubTaskForm(ThemeData theme) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: theme.colorScheme.surfaceContainerHighest,
        borderRadius: BorderRadius.circular(TypographyConstants.radiusStandard),
      ),
      child: Column(
        children: [
          TextField(
            controller: _newSubTaskController,
            decoration: const InputDecoration(
              hintText: 'Enter subtask title...',
              border: InputBorder.none,
              contentPadding: EdgeInsets.zero,
            ),
            autofocus: true,
            onSubmitted: (_) => _addSubTask(),
          ),
          const SizedBox(height: 8),
          Row(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              TextButton(
                onPressed: _cancelAddSubTask,
                child: const Text('Cancel'),
              ),
              const SizedBox(width: 8),
              ElevatedButton(
                onPressed: _isLoading ? null : _addSubTask,
                child: _isLoading
                    ? const SizedBox(
                        width: 16,
                        height: 16,
                        child: CircularProgressIndicator(strokeWidth: 2),
                      )
                    : const Text('Add'),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildAddSubTaskButton(ThemeData theme) {
    return InkWell(
      onTap: () {
        setState(() {
          _isAddingSubTask = true;
        });
      },
      borderRadius: BorderRadius.circular(TypographyConstants.radiusStandard),
      child: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          border: Border.all(
            color: theme.colorScheme.outline.withValues(alpha: 0.3),
          ),
          borderRadius: BorderRadius.circular(TypographyConstants.radiusStandard),
        ),
        child: Row(
          children: [
            Icon(
              Icons.add,
              size: 20,
              color: theme.colorScheme.primary,
            ),
            const SizedBox(width: 8),
            Text(
              'Add subtask',
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.primary,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEmptyState(ThemeData theme) {
    return Container(
      padding: const EdgeInsets.all(24),
      child: Column(
        children: [
          Icon(
            Icons.checklist,
            size: 48,
            color: theme.colorScheme.onSurfaceVariant.withValues(alpha: 0.5),
          ),
          const SizedBox(height: 12),
          Text(
            'No subtasks yet',
            style: theme.textTheme.bodyMedium?.copyWith(
              color: theme.colorScheme.onSurfaceVariant,
            ),
          ),
          const SizedBox(height: 8),
          if (widget.isEditable)
            TextButton.icon(
              onPressed: () {
                setState(() {
                  _isAddingSubTask = true;
                });
              },
              icon: const Icon(Icons.add),
              label: const Text('Add first subtask'),
            ),
        ],
      ),
    );
  }

  Widget _buildErrorState(ThemeData theme, String error) {
    return Container(
      padding: const EdgeInsets.all(24),
      child: Column(
        children: [
          Icon(
            Icons.error_outline,
            size: 48,
            color: theme.colorScheme.error,
          ),
          const SizedBox(height: 12),
          Text(
            'Error loading subtasks',
            style: theme.textTheme.bodyMedium?.copyWith(
              color: theme.colorScheme.error,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            error,
            style: theme.textTheme.bodySmall?.copyWith(
              color: theme.colorScheme.onSurfaceVariant,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: () => ref.refresh(subtasksForTaskProvider(widget.task.id)),
            child: const Text('Retry'),
          ),
        ],
      ),
    );
  }

  // Actions
  Future<void> _toggleSubtask(String subtaskId) async {
    try {
      final notifier = ref.read(subtaskNotifierProvider(widget.task.id).notifier);
      await notifier.toggleSubtaskCompletion(subtaskId);
      HapticFeedback.lightImpact();
    } catch (e) {
      _showErrorSnackBar('Failed to toggle subtask: $e');
    }
  }

  Future<void> _addSubTask() async {
    final title = _newSubTaskController.text.trim();
    if (title.isEmpty) return;

    setState(() => _isLoading = true);

    try {
      final notifier = ref.read(subtaskNotifierProvider(widget.task.id).notifier);
      await notifier.addSubtask(title);
      
      _newSubTaskController.clear();
      setState(() {
        _isAddingSubTask = false;
        _isLoading = false;
      });
      
      HapticFeedback.lightImpact();
    } catch (e) {
      setState(() => _isLoading = false);
      _showErrorSnackBar('Failed to add subtask: $e');
    }
  }

  void _cancelAddSubTask() {
    _newSubTaskController.clear();
    setState(() {
      _isAddingSubTask = false;
    });
  }

  Future<void> _editSubtask(entities.SubTask subtask) async {
    final controller = TextEditingController(text: subtask.title);
    
    final newTitle = await showDialog<String>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Edit Subtask'),
        content: TextField(
          controller: controller,
          decoration: const InputDecoration(
            labelText: 'Subtask title',
            border: OutlineInputBorder(),
          ),
          autofocus: true,
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(controller.text.trim()),
            child: const Text('Save'),
          ),
        ],
      ),
    );

    if (newTitle != null && newTitle.isNotEmpty && newTitle != subtask.title) {
      try {
        final notifier = ref.read(subtaskNotifierProvider(widget.task.id).notifier);
        await notifier.updateSubtaskTitle(subtask.id, newTitle);
      } catch (e) {
        _showErrorSnackBar('Failed to update subtask: $e');
      }
    }
  }

  Future<void> _deleteSubtask(String subtaskId) async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Subtask'),
        content: const Text('Are you sure you want to delete this subtask?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('Delete'),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      try {
        final notifier = ref.read(subtaskNotifierProvider(widget.task.id).notifier);
        await notifier.deleteSubtask(subtaskId);
        HapticFeedback.lightImpact();
      } catch (e) {
        _showErrorSnackBar('Failed to delete subtask: $e');
      }
    }
  }

  Future<void> _moveSubtaskUp(String subtaskId) async {
    try {
      final notifier = ref.read(subtaskNotifierProvider(widget.task.id).notifier);
      await notifier.moveSubtaskUp(subtaskId);
      HapticFeedback.lightImpact();
    } catch (e) {
      _showErrorSnackBar('Failed to move subtask: $e');
    }
  }

  Future<void> _moveSubtaskDown(String subtaskId) async {
    try {
      final notifier = ref.read(subtaskNotifierProvider(widget.task.id).notifier);
      await notifier.moveSubtaskDown(subtaskId);
      HapticFeedback.lightImpact();
    } catch (e) {
      _showErrorSnackBar('Failed to move subtask: $e');
    }
  }

  Future<void> _handleMenuAction(String action) async {
    try {
      final notifier = ref.read(subtaskNotifierProvider(widget.task.id).notifier);
      
      switch (action) {
        case 'complete_all':
          await notifier.completeAllSubtasks();
          break;
        case 'uncomplete_all':
          await notifier.uncompleteAllSubtasks();
          break;
        case 'delete_all':
          final confirmed = await _confirmDeleteAll();
          if (confirmed) {
            final subtasks = await ref.read(subtasksForTaskProvider(widget.task.id).future);
            for (final subtask in subtasks) {
              await notifier.deleteSubtask(subtask.id);
            }
          }
          break;
      }
      
      HapticFeedback.lightImpact();
    } catch (e) {
      _showErrorSnackBar('Failed to perform action: $e');
    }
  }

  Future<bool> _confirmDeleteAll() async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete All Subtasks'),
        content: const Text('Are you sure you want to delete all subtasks? This action cannot be undone.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('Delete All'),
          ),
        ],
      ),
    );
    
    return confirmed ?? false;
  }

  void _showErrorSnackBar(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: Theme.of(context).colorScheme.error,
        ),
      );
    }
  }

  String _formatDateTime(DateTime dateTime) {
    return '${dateTime.day}/${dateTime.month}/${dateTime.year} ${dateTime.hour}:${dateTime.minute.toString().padLeft(2, '0')}';
  }
}