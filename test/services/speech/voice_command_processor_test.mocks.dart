// Mocks generated by Mockito 5.4.6 from annotations
// in task_tracker_app/test/services/speech/voice_command_processor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task_tracker_app/domain/entities/task_enums.dart' as _i5;
import 'package:task_tracker_app/domain/entities/task_model.dart' as _i4;
import 'package:task_tracker_app/domain/repositories/task_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i2.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.TaskModel>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i3.Future<List<_i4.TaskModel>>.value(<_i4.TaskModel>[]),
      ) as _i3.Future<List<_i4.TaskModel>>);

  @override
  _i3.Future<_i4.TaskModel?> getTaskById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue: _i3.Future<_i4.TaskModel?>.value(),
      ) as _i3.Future<_i4.TaskModel?>);

  @override
  _i3.Future<void> createTask(_i4.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateTask(_i4.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.TaskModel>> getTasksByStatus(_i5.TaskStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByStatus,
          [status],
        ),
        returnValue: _i3.Future<List<_i4.TaskModel>>.value(<_i4.TaskModel>[]),
      ) as _i3.Future<List<_i4.TaskModel>>);

  @override
  _i3.Future<List<_i4.TaskModel>> getTasksByPriority(
          _i5.TaskPriority? priority) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByPriority,
          [priority],
        ),
        returnValue: _i3.Future<List<_i4.TaskModel>>.value(<_i4.TaskModel>[]),
      ) as _i3.Future<List<_i4.TaskModel>>);

  @override
  _i3.Future<List<_i4.TaskModel>> getTasksDueToday() => (super.noSuchMethod(
        Invocation.method(
          #getTasksDueToday,
          [],
        ),
        returnValue: _i3.Future<List<_i4.TaskModel>>.value(<_i4.TaskModel>[]),
      ) as _i3.Future<List<_i4.TaskModel>>);

  @override
  _i3.Future<List<_i4.TaskModel>> getOverdueTasks() => (super.noSuchMethod(
        Invocation.method(
          #getOverdueTasks,
          [],
        ),
        returnValue: _i3.Future<List<_i4.TaskModel>>.value(<_i4.TaskModel>[]),
      ) as _i3.Future<List<_i4.TaskModel>>);

  @override
  _i3.Future<List<_i4.TaskModel>> getTasksByProject(String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByProject,
          [projectId],
        ),
        returnValue: _i3.Future<List<_i4.TaskModel>>.value(<_i4.TaskModel>[]),
      ) as _i3.Future<List<_i4.TaskModel>>);

  @override
  _i3.Future<List<_i4.TaskModel>> searchTasks(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchTasks,
          [query],
        ),
        returnValue: _i3.Future<List<_i4.TaskModel>>.value(<_i4.TaskModel>[]),
      ) as _i3.Future<List<_i4.TaskModel>>);

  @override
  _i3.Future<List<_i4.TaskModel>> getTasksWithFilter(_i2.TaskFilter? filter) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksWithFilter,
          [filter],
        ),
        returnValue: _i3.Future<List<_i4.TaskModel>>.value(<_i4.TaskModel>[]),
      ) as _i3.Future<List<_i4.TaskModel>>);

  @override
  _i3.Stream<List<_i4.TaskModel>> watchAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #watchAllTasks,
          [],
        ),
        returnValue: _i3.Stream<List<_i4.TaskModel>>.empty(),
      ) as _i3.Stream<List<_i4.TaskModel>>);

  @override
  _i3.Stream<List<_i4.TaskModel>> watchTasksByStatus(_i5.TaskStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchTasksByStatus,
          [status],
        ),
        returnValue: _i3.Stream<List<_i4.TaskModel>>.empty(),
      ) as _i3.Stream<List<_i4.TaskModel>>);

  @override
  _i3.Stream<List<_i4.TaskModel>> watchTasksByProject(String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchTasksByProject,
          [projectId],
        ),
        returnValue: _i3.Stream<List<_i4.TaskModel>>.empty(),
      ) as _i3.Stream<List<_i4.TaskModel>>);
}
