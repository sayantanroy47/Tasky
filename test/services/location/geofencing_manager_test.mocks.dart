// Mocks generated by Mockito 5.4.5 from annotations
// in task_tracker_app/test/services/location/geofencing_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:riverpod/src/internals.dart' as _i4;
import 'package:task_tracker_app/domain/entities/task_model.dart' as _i8;
import 'package:task_tracker_app/services/location/location_models.dart' as _i2;
import 'package:task_tracker_app/services/location/location_service.dart'
    as _i5;
import 'package:task_tracker_app/services/notification/notification_models.dart'
    as _i3;
import 'package:task_tracker_app/services/notification/notification_service.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationData_0 extends _i1.SmartFake implements _i2.LocationData {
  _FakeLocationData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotificationSettings_1 extends _i1.SmartFake
    implements _i3.NotificationSettings {
  _FakeNotificationSettings_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderContainer_2 extends _i1.SmartFake
    implements _i4.ProviderContainer {
  _FakeProviderContainer_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKeepAliveLink_3 extends _i1.SmartFake implements _i4.KeepAliveLink {
  _FakeKeepAliveLink_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderSubscription_4<State1> extends _i1.SmartFake
    implements _i4.ProviderSubscription<State1> {
  _FakeProviderSubscription_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i5.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> isLocationServiceEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isLocationServiceEnabled,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i2.LocationPermissionStatus> checkPermission() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkPermission,
          [],
        ),
        returnValue: _i6.Future<_i2.LocationPermissionStatus>.value(
            _i2.LocationPermissionStatus.granted),
      ) as _i6.Future<_i2.LocationPermissionStatus>);

  @override
  _i6.Future<_i2.LocationPermissionStatus> requestPermission() =>
      (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i6.Future<_i2.LocationPermissionStatus>.value(
            _i2.LocationPermissionStatus.granted),
      ) as _i6.Future<_i2.LocationPermissionStatus>);

  @override
  _i6.Future<_i2.LocationData> getCurrentLocation() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocation,
          [],
        ),
        returnValue: _i6.Future<_i2.LocationData>.value(_FakeLocationData_0(
          this,
          Invocation.method(
            #getCurrentLocation,
            [],
          ),
        )),
      ) as _i6.Future<_i2.LocationData>);

  @override
  _i6.Stream<_i2.LocationData> getLocationStream() => (super.noSuchMethod(
        Invocation.method(
          #getLocationStream,
          [],
        ),
        returnValue: _i6.Stream<_i2.LocationData>.empty(),
      ) as _i6.Stream<_i2.LocationData>);

  @override
  _i6.Future<String?> getAddressFromCoordinates(
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAddressFromCoordinates,
          [
            latitude,
            longitude,
          ],
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);

  @override
  _i6.Future<_i2.LocationData?> getCoordinatesFromAddress(String? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCoordinatesFromAddress,
          [address],
        ),
        returnValue: _i6.Future<_i2.LocationData?>.value(),
      ) as _i6.Future<_i2.LocationData?>);

  @override
  double calculateDistance(
    double? startLatitude,
    double? startLongitude,
    double? endLatitude,
    double? endLongitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateDistance,
          [
            startLatitude,
            startLongitude,
            endLatitude,
            endLongitude,
          ],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  bool isWithinGeofence(
    _i2.LocationData? location,
    _i2.GeofenceData? geofence,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isWithinGeofence,
          [
            location,
            geofence,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> startGeofenceMonitoring(_i2.GeofenceData? geofence) =>
      (super.noSuchMethod(
        Invocation.method(
          #startGeofenceMonitoring,
          [geofence],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> stopGeofenceMonitoring(String? geofenceId) =>
      (super.noSuchMethod(
        Invocation.method(
          #stopGeofenceMonitoring,
          [geofenceId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> stopAllGeofenceMonitoring() => (super.noSuchMethod(
        Invocation.method(
          #stopAllGeofenceMonitoring,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Stream<_i2.GeofenceEvent> getGeofenceEventStream() => (super.noSuchMethod(
        Invocation.method(
          #getGeofenceEventStream,
          [],
        ),
        returnValue: _i6.Stream<_i2.GeofenceEvent>.empty(),
      ) as _i6.Stream<_i2.GeofenceEvent>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i7.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> get hasPermissions => (super.noSuchMethod(
        Invocation.getter(#hasPermissions),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Stream<_i7.NotificationEvent> get notificationEvents =>
      (super.noSuchMethod(
        Invocation.getter(#notificationEvents),
        returnValue: _i6.Stream<_i7.NotificationEvent>.empty(),
      ) as _i6.Stream<_i7.NotificationEvent>);

  @override
  _i6.Future<bool> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> requestPermissions() => (super.noSuchMethod(
        Invocation.method(
          #requestPermissions,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<int?> scheduleTaskReminder({
    required _i8.TaskModel? task,
    required DateTime? scheduledTime,
    Duration? customReminder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleTaskReminder,
          [],
          {
            #task: task,
            #scheduledTime: scheduledTime,
            #customReminder: customReminder,
          },
        ),
        returnValue: _i6.Future<int?>.value(),
      ) as _i6.Future<int?>);

  @override
  _i6.Future<List<int>> scheduleMultipleReminders({
    required _i8.TaskModel? task,
    required List<Duration>? reminderIntervals,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleMultipleReminders,
          [],
          {
            #task: task,
            #reminderIntervals: reminderIntervals,
          },
        ),
        returnValue: _i6.Future<List<int>>.value(<int>[]),
      ) as _i6.Future<List<int>>);

  @override
  _i6.Future<int?> scheduleDailySummary({
    required DateTime? scheduledTime,
    required List<_i8.TaskModel>? tasks,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleDailySummary,
          [],
          {
            #scheduledTime: scheduledTime,
            #tasks: tasks,
          },
        ),
        returnValue: _i6.Future<int?>.value(),
      ) as _i6.Future<int?>);

  @override
  _i6.Future<int?> scheduleOverdueNotification(
          {required _i8.TaskModel? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleOverdueNotification,
          [],
          {#task: task},
        ),
        returnValue: _i6.Future<int?>.value(),
      ) as _i6.Future<int?>);

  @override
  _i6.Future<void> cancelNotification(int? notificationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelNotification,
          [notificationId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> cancelTaskNotifications(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelTaskNotifications,
          [taskId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> cancelAllNotifications() => (super.noSuchMethod(
        Invocation.method(
          #cancelAllNotifications,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<_i3.ScheduledNotification>> getScheduledNotifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #getScheduledNotifications,
          [],
        ),
        returnValue: _i6.Future<List<_i3.ScheduledNotification>>.value(
            <_i3.ScheduledNotification>[]),
      ) as _i6.Future<List<_i3.ScheduledNotification>>);

  @override
  _i6.Future<List<_i3.ScheduledNotification>> getTaskNotifications(
          String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskNotifications,
          [taskId],
        ),
        returnValue: _i6.Future<List<_i3.ScheduledNotification>>.value(
            <_i3.ScheduledNotification>[]),
      ) as _i6.Future<List<_i3.ScheduledNotification>>);

  @override
  _i6.Future<void> handleNotificationAction({
    required String? taskId,
    required _i3.NotificationAction? action,
    Map<String, dynamic>? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleNotificationAction,
          [],
          {
            #taskId: taskId,
            #action: action,
            #payload: payload,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateSettings(_i3.NotificationSettings? settings) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSettings,
          [settings],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i3.NotificationSettings> getSettings() => (super.noSuchMethod(
        Invocation.method(
          #getSettings,
          [],
        ),
        returnValue: _i6.Future<_i3.NotificationSettings>.value(
            _FakeNotificationSettings_1(
          this,
          Invocation.method(
            #getSettings,
            [],
          ),
        )),
      ) as _i6.Future<_i3.NotificationSettings>);

  @override
  _i6.Future<void> showImmediateNotification({
    required String? title,
    required String? body,
    String? taskId,
    _i3.NotificationType? type = _i3.NotificationType.taskReminder,
    Map<String, dynamic>? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showImmediateNotification,
          [],
          {
            #title: title,
            #body: body,
            #taskId: taskId,
            #type: type,
            #payload: payload,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> rescheduleAllNotifications() => (super.noSuchMethod(
        Invocation.method(
          #rescheduleAllNotifications,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<bool> shouldSendNotification(DateTime? scheduledTime) =>
      (super.noSuchMethod(
        Invocation.method(
          #shouldSendNotification,
          [scheduledTime],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<DateTime?> getNextNotificationTime(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNextNotificationTime,
          [taskId],
        ),
        returnValue: _i6.Future<DateTime?>.value(),
      ) as _i6.Future<DateTime?>);
}

/// A class which mocks [Ref].
///
/// See the documentation for Mockito's code generation for more information.
class MockRef<State extends Object?> extends _i1.Mock
    implements _i4.Ref<State> {
  MockRef() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ProviderContainer get container => (super.noSuchMethod(
        Invocation.getter(#container),
        returnValue: _FakeProviderContainer_2(
          this,
          Invocation.getter(#container),
        ),
      ) as _i4.ProviderContainer);

  @override
  T refresh<T>(_i4.Refreshable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [provider],
        ),
        returnValue: _i9.dummyValue<T>(
          this,
          Invocation.method(
            #refresh,
            [provider],
          ),
        ),
      ) as T);

  @override
  void invalidate(_i4.ProviderOrFamily? provider) => super.noSuchMethod(
        Invocation.method(
          #invalidate,
          [provider],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenSelf(
    void Function(
      State?,
      State,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void invalidateSelf() => super.noSuchMethod(
        Invocation.method(
          #invalidateSelf,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onAddListener(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onAddListener,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemoveListener(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onRemoveListener,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onResume(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onResume,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onCancel(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onCancel,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDispose(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T read<T>(_i4.ProviderListenable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [provider],
        ),
        returnValue: _i9.dummyValue<T>(
          this,
          Invocation.method(
            #read,
            [provider],
          ),
        ),
      ) as T);

  @override
  bool exists(_i4.ProviderBase<Object?>? provider) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [provider],
        ),
        returnValue: false,
      ) as bool);

  @override
  T watch<T>(_i4.ProviderListenable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [provider],
        ),
        returnValue: _i9.dummyValue<T>(
          this,
          Invocation.method(
            #watch,
            [provider],
          ),
        ),
      ) as T);

  @override
  _i4.KeepAliveLink keepAlive() => (super.noSuchMethod(
        Invocation.method(
          #keepAlive,
          [],
        ),
        returnValue: _FakeKeepAliveLink_3(
          this,
          Invocation.method(
            #keepAlive,
            [],
          ),
        ),
      ) as _i4.KeepAliveLink);

  @override
  _i4.ProviderSubscription<T> listen<T>(
    _i4.ProviderListenable<T>? provider,
    void Function(
      T?,
      T,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
    bool? fireImmediately,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [
            provider,
            listener,
          ],
          {
            #onError: onError,
            #fireImmediately: fireImmediately,
          },
        ),
        returnValue: _FakeProviderSubscription_4<T>(
          this,
          Invocation.method(
            #listen,
            [
              provider,
              listener,
            ],
            {
              #onError: onError,
              #fireImmediately: fireImmediately,
            },
          ),
        ),
      ) as _i4.ProviderSubscription<T>);
}
