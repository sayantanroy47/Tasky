// Mocks generated by Mockito 5.4.5 from annotations
// in task_tracker_app/test/services/ai/composite_ai_task_parser_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:task_tracker_app/domain/entities/task_enums.dart' as _i6;
import 'package:task_tracker_app/services/ai/ai_task_parser.dart' as _i2;
import 'package:task_tracker_app/services/ai/claude_task_parser.dart' as _i7;
import 'package:task_tracker_app/services/ai/local_task_parser.dart' as _i8;
import 'package:task_tracker_app/services/ai/openai_task_parser.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeParsedTaskData_0 extends _i1.SmartFake
    implements _i2.ParsedTaskData {
  _FakeParsedTaskData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OpenAITaskParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpenAITaskParser extends _i1.Mock implements _i3.OpenAITaskParser {
  MockOpenAITaskParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAvailable => (super.noSuchMethod(
        Invocation.getter(#isAvailable),
        returnValue: false,
      ) as bool);

  @override
  String get serviceName => (super.noSuchMethod(
        Invocation.getter(#serviceName),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#serviceName),
        ),
      ) as String);

  @override
  _i5.Future<_i2.ParsedTaskData> parseTaskFromText(String? text) =>
      (super.noSuchMethod(
        Invocation.method(
          #parseTaskFromText,
          [text],
        ),
        returnValue: _i5.Future<_i2.ParsedTaskData>.value(_FakeParsedTaskData_0(
          this,
          Invocation.method(
            #parseTaskFromText,
            [text],
          ),
        )),
      ) as _i5.Future<_i2.ParsedTaskData>);

  @override
  _i5.Future<List<String>> suggestTags(String? taskText) => (super.noSuchMethod(
        Invocation.method(
          #suggestTags,
          [taskText],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<DateTime?> extractDueDate(String? text) => (super.noSuchMethod(
        Invocation.method(
          #extractDueDate,
          [text],
        ),
        returnValue: _i5.Future<DateTime?>.value(),
      ) as _i5.Future<DateTime?>);

  @override
  _i5.Future<_i6.TaskPriority> determinePriority(String? text) =>
      (super.noSuchMethod(
        Invocation.method(
          #determinePriority,
          [text],
        ),
        returnValue: _i5.Future<_i6.TaskPriority>.value(_i6.TaskPriority.low),
      ) as _i5.Future<_i6.TaskPriority>);

  @override
  _i5.Future<List<String>> extractSubtasks(String? text) => (super.noSuchMethod(
        Invocation.method(
          #extractSubtasks,
          [text],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ClaudeTaskParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockClaudeTaskParser extends _i1.Mock implements _i7.ClaudeTaskParser {
  MockClaudeTaskParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAvailable => (super.noSuchMethod(
        Invocation.getter(#isAvailable),
        returnValue: false,
      ) as bool);

  @override
  String get serviceName => (super.noSuchMethod(
        Invocation.getter(#serviceName),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#serviceName),
        ),
      ) as String);

  @override
  _i5.Future<_i2.ParsedTaskData> parseTaskFromText(String? text) =>
      (super.noSuchMethod(
        Invocation.method(
          #parseTaskFromText,
          [text],
        ),
        returnValue: _i5.Future<_i2.ParsedTaskData>.value(_FakeParsedTaskData_0(
          this,
          Invocation.method(
            #parseTaskFromText,
            [text],
          ),
        )),
      ) as _i5.Future<_i2.ParsedTaskData>);

  @override
  _i5.Future<List<String>> suggestTags(String? taskText) => (super.noSuchMethod(
        Invocation.method(
          #suggestTags,
          [taskText],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<DateTime?> extractDueDate(String? text) => (super.noSuchMethod(
        Invocation.method(
          #extractDueDate,
          [text],
        ),
        returnValue: _i5.Future<DateTime?>.value(),
      ) as _i5.Future<DateTime?>);

  @override
  _i5.Future<_i6.TaskPriority> determinePriority(String? text) =>
      (super.noSuchMethod(
        Invocation.method(
          #determinePriority,
          [text],
        ),
        returnValue: _i5.Future<_i6.TaskPriority>.value(_i6.TaskPriority.low),
      ) as _i5.Future<_i6.TaskPriority>);

  @override
  _i5.Future<List<String>> extractSubtasks(String? text) => (super.noSuchMethod(
        Invocation.method(
          #extractSubtasks,
          [text],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocalTaskParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalTaskParser extends _i1.Mock implements _i8.LocalTaskParser {
  MockLocalTaskParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAvailable => (super.noSuchMethod(
        Invocation.getter(#isAvailable),
        returnValue: false,
      ) as bool);

  @override
  String get serviceName => (super.noSuchMethod(
        Invocation.getter(#serviceName),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#serviceName),
        ),
      ) as String);

  @override
  _i5.Future<_i2.ParsedTaskData> parseTaskFromText(String? text) =>
      (super.noSuchMethod(
        Invocation.method(
          #parseTaskFromText,
          [text],
        ),
        returnValue: _i5.Future<_i2.ParsedTaskData>.value(_FakeParsedTaskData_0(
          this,
          Invocation.method(
            #parseTaskFromText,
            [text],
          ),
        )),
      ) as _i5.Future<_i2.ParsedTaskData>);

  @override
  _i5.Future<List<String>> suggestTags(String? taskText) => (super.noSuchMethod(
        Invocation.method(
          #suggestTags,
          [taskText],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<DateTime?> extractDueDate(String? text) => (super.noSuchMethod(
        Invocation.method(
          #extractDueDate,
          [text],
        ),
        returnValue: _i5.Future<DateTime?>.value(),
      ) as _i5.Future<DateTime?>);

  @override
  _i5.Future<_i6.TaskPriority> determinePriority(String? text) =>
      (super.noSuchMethod(
        Invocation.method(
          #determinePriority,
          [text],
        ),
        returnValue: _i5.Future<_i6.TaskPriority>.value(_i6.TaskPriority.low),
      ) as _i5.Future<_i6.TaskPriority>);

  @override
  _i5.Future<List<String>> extractSubtasks(String? text) => (super.noSuchMethod(
        Invocation.method(
          #extractSubtasks,
          [text],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);
}
