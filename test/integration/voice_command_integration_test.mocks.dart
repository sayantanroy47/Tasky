// Mocks generated by Mockito 5.4.6 from annotations
// in task_tracker_app/test/integration/voice_command_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task_tracker_app/domain/entities/task_enums.dart' as _i7;
import 'package:task_tracker_app/domain/entities/task_model.dart' as _i6;
import 'package:task_tracker_app/domain/repositories/task_repository.dart'
    as _i5;
import 'package:task_tracker_app/services/speech/speech_service.dart' as _i3;
import 'package:task_tracker_app/services/speech/transcription_service.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTranscriptionConfig_0 extends _i1.SmartFake
    implements _i2.TranscriptionConfig {
  _FakeTranscriptionConfig_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTranscriptionResult_1 extends _i1.SmartFake
    implements _i2.TranscriptionResult {
  _FakeTranscriptionResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SpeechService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpeechService extends _i1.Mock implements _i3.SpeechService {
  MockSpeechService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAvailable => (super.noSuchMethod(
        Invocation.getter(#isAvailable),
        returnValue: false,
      ) as bool);

  @override
  bool get isListening => (super.noSuchMethod(
        Invocation.getter(#isListening),
        returnValue: false,
      ) as bool);

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  _i2.TranscriptionConfig get transcriptionConfig => (super.noSuchMethod(
        Invocation.getter(#transcriptionConfig),
        returnValue: _FakeTranscriptionConfig_0(
          this,
          Invocation.getter(#transcriptionConfig),
        ),
      ) as _i2.TranscriptionConfig);

  @override
  _i4.Future<bool> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> startListening({
    required dynamic Function(String)? onResult,
    required dynamic Function(String)? onError,
    String? localeId,
    Duration? listenFor,
    Duration? pauseFor,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startListening,
          [],
          {
            #onResult: onResult,
            #onError: onError,
            #localeId: localeId,
            #listenFor: listenFor,
            #pauseFor: pauseFor,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stopListening() => (super.noSuchMethod(
        Invocation.method(
          #stopListening,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancel() => (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<String>> getAvailableLocales() => (super.noSuchMethod(
        Invocation.method(
          #getAvailableLocales,
          [],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<bool> hasPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasPermission,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> requestPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.TranscriptionResult> transcribeAudioFile(
          String? audioFilePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #transcribeAudioFile,
          [audioFilePath],
        ),
        returnValue: _i4.Future<_i2.TranscriptionResult>.value(
            _FakeTranscriptionResult_1(
          this,
          Invocation.method(
            #transcribeAudioFile,
            [audioFilePath],
          ),
        )),
      ) as _i4.Future<_i2.TranscriptionResult>);

  @override
  _i4.Future<_i2.TranscriptionResult> transcribeAudioData(
          List<int>? audioData) =>
      (super.noSuchMethod(
        Invocation.method(
          #transcribeAudioData,
          [audioData],
        ),
        returnValue: _i4.Future<_i2.TranscriptionResult>.value(
            _FakeTranscriptionResult_1(
          this,
          Invocation.method(
            #transcribeAudioData,
            [audioData],
          ),
        )),
      ) as _i4.Future<_i2.TranscriptionResult>);

  @override
  _i4.Future<void> updateTranscriptionConfig(_i2.TranscriptionConfig? config) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTranscriptionConfig,
          [config],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i5.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i6.TaskModel>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i4.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i4.Future<List<_i6.TaskModel>>);

  @override
  _i4.Future<_i6.TaskModel?> getTaskById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue: _i4.Future<_i6.TaskModel?>.value(),
      ) as _i4.Future<_i6.TaskModel?>);

  @override
  _i4.Future<void> createTask(_i6.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateTask(_i6.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.TaskModel>> getTasksByStatus(_i7.TaskStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByStatus,
          [status],
        ),
        returnValue: _i4.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i4.Future<List<_i6.TaskModel>>);

  @override
  _i4.Future<List<_i6.TaskModel>> getTasksByPriority(
          _i7.TaskPriority? priority) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByPriority,
          [priority],
        ),
        returnValue: _i4.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i4.Future<List<_i6.TaskModel>>);

  @override
  _i4.Future<List<_i6.TaskModel>> getTasksDueToday() => (super.noSuchMethod(
        Invocation.method(
          #getTasksDueToday,
          [],
        ),
        returnValue: _i4.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i4.Future<List<_i6.TaskModel>>);

  @override
  _i4.Future<List<_i6.TaskModel>> getOverdueTasks() => (super.noSuchMethod(
        Invocation.method(
          #getOverdueTasks,
          [],
        ),
        returnValue: _i4.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i4.Future<List<_i6.TaskModel>>);

  @override
  _i4.Future<List<_i6.TaskModel>> getTasksByProject(String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByProject,
          [projectId],
        ),
        returnValue: _i4.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i4.Future<List<_i6.TaskModel>>);

  @override
  _i4.Future<List<_i6.TaskModel>> searchTasks(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchTasks,
          [query],
        ),
        returnValue: _i4.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i4.Future<List<_i6.TaskModel>>);

  @override
  _i4.Future<List<_i6.TaskModel>> getTasksWithFilter(_i5.TaskFilter? filter) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksWithFilter,
          [filter],
        ),
        returnValue: _i4.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i4.Future<List<_i6.TaskModel>>);

  @override
  _i4.Stream<List<_i6.TaskModel>> watchAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #watchAllTasks,
          [],
        ),
        returnValue: _i4.Stream<List<_i6.TaskModel>>.empty(),
      ) as _i4.Stream<List<_i6.TaskModel>>);

  @override
  _i4.Stream<List<_i6.TaskModel>> watchTasksByStatus(_i7.TaskStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchTasksByStatus,
          [status],
        ),
        returnValue: _i4.Stream<List<_i6.TaskModel>>.empty(),
      ) as _i4.Stream<List<_i6.TaskModel>>);

  @override
  _i4.Stream<List<_i6.TaskModel>> watchTasksByProject(String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchTasksByProject,
          [projectId],
        ),
        returnValue: _i4.Stream<List<_i6.TaskModel>>.empty(),
      ) as _i4.Stream<List<_i6.TaskModel>>);
}
